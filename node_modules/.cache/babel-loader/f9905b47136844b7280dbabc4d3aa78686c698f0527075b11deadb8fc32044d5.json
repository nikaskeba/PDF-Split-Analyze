{"ast":null,"code":"var _jsxFileName = \"/Users/nika/Documents/GitHub/pdf-upload-app/src/App.js\",\n  _s = $RefreshSig$();\n//app.js\nimport React, { useState } from 'react';\nimport * as pdfjs from 'pdfjs-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = process.env.PUBLIC_URL + '/pdf.worker.js';\nfunction App() {\n  _s();\n  const [pdf, setPdf] = useState(null);\n  const [chapterOnePage, setChapterOnePage] = useState(null);\n  const onFileChange = async e => {\n    const file = e.target.files[0];\n    console.log(\"Selected file:\", file); // Log the file details\n\n    if (file) {\n      const fileReader = new FileReader();\n      fileReader.onload = async event => {\n        const bufferClone = event.target.result.slice(0);\n        const pdfData = new Uint8Array(bufferClone);\n        console.log(\"File loaded:\", event.target.result); // Log the raw result\n\n        console.log(\"PDF Data:\", pdfData); // Log the Uint8Array\n\n        const pdfDoc = await pdfjs.getDocument({\n          data: pdfData\n        }).promise;\n        for (let i = 1; i <= pdfDoc.numPages; i++) {\n          const page = await pdfDoc.getPage(i);\n          const content = await page.getTextContent();\n          const textItems = content.items.map(item => item.str).join(' ');\n          if (textItems.includes(\"Chapter I\")) {\n            setChapterOnePage(i);\n            break;\n          }\n        }\n        console.log(\"File reading completed\");\n        setPdf(pdfData);\n      };\n      fileReader.onerror = error => {\n        console.error(\"File reading error:\", error); // Log any reading errors\n      };\n\n      fileReader.readAsArrayBuffer(file);\n    }\n  };\n  const retrieveUploadedPdf = () => {\n    const pdfString = localStorage.getItem('uploadedPdf');\n    if (pdfString) {\n      const pdfArray = pdfString.split(',').map(byte => parseInt(byte, 10));\n      const retrievedPdf = new Uint8Array(pdfArray);\n      console.log(\"Retrieved PDF:\", retrievedPdf);\n      // Do something with retrievedPdf\n    } else {\n      console.log(\"No PDF found in local storage.\");\n    }\n  };\n  const onUpload = () => {\n    if (!pdf) {\n      console.error(\"No PDF selected for upload.\");\n      return;\n    }\n    try {\n      // Convert the Uint8Array to a string for storage\n      const pdfString = Array.from(pdf).toString();\n\n      // Store in local storage\n      localStorage.setItem('uploadedPdf', pdfString);\n      console.log(\"PDF uploaded locally.\");\n    } catch (error) {\n      console.error(\"Failed to upload PDF:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PDF Uploader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      onChange: onFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), chapterOnePage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Chapter I starts on page: \", chapterOnePage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xP4czhumVSLQwb37JpnqHE/1Nkk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","process","env","PUBLIC_URL","App","_s","pdf","setPdf","chapterOnePage","setChapterOnePage","onFileChange","e","file","target","files","console","log","fileReader","FileReader","onload","event","bufferClone","result","slice","pdfData","Uint8Array","pdfDoc","getDocument","data","promise","i","numPages","page","getPage","content","getTextContent","textItems","items","map","item","str","join","includes","onerror","error","readAsArrayBuffer","retrieveUploadedPdf","pdfString","localStorage","getItem","pdfArray","split","byte","parseInt","retrievedPdf","onUpload","Array","from","toString","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/nika/Documents/GitHub/pdf-upload-app/src/App.js"],"sourcesContent":["//app.js\nimport React, { useState } from 'react';\nimport * as pdfjs from 'pdfjs-dist';\n\npdfjs.GlobalWorkerOptions.workerSrc = process.env.PUBLIC_URL + '/pdf.worker.js';\n\nfunction App() {\n  const [pdf, setPdf] = useState(null);\n  const [chapterOnePage, setChapterOnePage] = useState(null);\n\nconst onFileChange = async (e) => {\n  const file = e.target.files[0];\n  console.log(\"Selected file:\", file);  // Log the file details\n\n  if (file) {\n    const fileReader = new FileReader();\n\n    fileReader.onload = async (event) => {\n    const bufferClone = event.target.result.slice(0);\n    const pdfData = new Uint8Array(bufferClone);\n      console.log(\"File loaded:\", event.target.result);  // Log the raw result\n    \n      console.log(\"PDF Data:\", pdfData);  // Log the Uint8Array\n      \n      const pdfDoc = await pdfjs.getDocument({data: pdfData}).promise;\n      for (let i = 1; i <= pdfDoc.numPages; i++) {\n        const page = await pdfDoc.getPage(i);\n        const content = await page.getTextContent();\n        const textItems = content.items.map(item => item.str).join(' ');\n\n        if (textItems.includes(\"Chapter I\")) {\n          setChapterOnePage(i);\n          break;\n        }\n      }\n\n     console.log(\"File reading completed\");\n      setPdf(pdfData);\n    };\n\n    fileReader.onerror = (error) => {\n      console.error(\"File reading error:\", error);  // Log any reading errors\n    };\n\n    fileReader.readAsArrayBuffer(file);\n  }\n};\n\n\nconst retrieveUploadedPdf = () => {\n  const pdfString = localStorage.getItem('uploadedPdf');\n  if (pdfString) {\n    const pdfArray = pdfString.split(',').map(byte => parseInt(byte, 10));\n    const retrievedPdf = new Uint8Array(pdfArray);\n    console.log(\"Retrieved PDF:\", retrievedPdf);\n    // Do something with retrievedPdf\n  } else {\n    console.log(\"No PDF found in local storage.\");\n  }\n};\n\nconst onUpload = () => {\n  if (!pdf) {\n    console.error(\"No PDF selected for upload.\");\n    return;\n  }\n\n  try {\n    // Convert the Uint8Array to a string for storage\n    const pdfString = Array.from(pdf).toString();\n\n    // Store in local storage\n    localStorage.setItem('uploadedPdf', pdfString);\n\n    console.log(\"PDF uploaded locally.\");\n  } catch (error) {\n    console.error(\"Failed to upload PDF:\", error);\n  }\n};\n\n\n  return (\n    <div className=\"App\">\n      <h1>PDF Uploader</h1>\n      <input type=\"file\" accept=\".pdf\" onChange={onFileChange} />\n      <button onClick={onUpload}>Upload</button>\n      {chapterOnePage && <p>Chapter I starts on page: {chapterOnePage}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
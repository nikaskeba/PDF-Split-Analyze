{"ast":null,"code":"var _jsxFileName = \"/Users/nika/Documents/GitHub/pdf-upload-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { PDFDocument } from 'pdf-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [pdf, setPdf] = useState(null);\n  const [chapterOnePage, setChapterOnePage] = useState(null);\n  const onFileChange = async e => {\n    const file = e.target.files[0];\n    if (file) {\n      const fileBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(fileBuffer);\n      setPdf(fileBuffer);\n\n      // Check each page for the text \"Chapter I\"\n      for (let i = 0; i < pdfDoc.getPageCount(); i++) {\n        const page = pdfDoc.getPage(i);\n        const content = await page.getTextContent();\n        if (content.items.some(item => item.str.includes(\"Chapter I\"))) {\n          setChapterOnePage(i + 1); // Pages are 0-indexed\n          break;\n        }\n      }\n    }\n  };\n  const onUpload = () => {\n    // Implement your upload logic here.\n    // For now, we'll just display a console message.\n    console.log(\"PDF uploaded:\", pdf);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PDF Uploader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      onChange: onFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), chapterOnePage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Chapter I starts on page: \", chapterOnePage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xP4czhumVSLQwb37JpnqHE/1Nkk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PDFDocument","jsxDEV","_jsxDEV","App","_s","pdf","setPdf","chapterOnePage","setChapterOnePage","onFileChange","e","file","target","files","fileBuffer","arrayBuffer","pdfDoc","load","i","getPageCount","page","getPage","content","getTextContent","items","some","item","str","includes","onUpload","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/nika/Documents/GitHub/pdf-upload-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { PDFDocument } from 'pdf-lib';\n\nfunction App() {\n  const [pdf, setPdf] = useState(null);\n  const [chapterOnePage, setChapterOnePage] = useState(null);\n\n  const onFileChange = async (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const fileBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(fileBuffer);\n      setPdf(fileBuffer);\n      \n      // Check each page for the text \"Chapter I\"\n      for (let i = 0; i < pdfDoc.getPageCount(); i++) {\n        const page = pdfDoc.getPage(i);\n        const content = await page.getTextContent();\n        if (content.items.some(item => item.str.includes(\"Chapter I\"))) {\n          setChapterOnePage(i + 1); // Pages are 0-indexed\n          break;\n        }\n      }\n    }\n  };\n\n  const onUpload = () => {\n    // Implement your upload logic here.\n    // For now, we'll just display a console message.\n    console.log(\"PDF uploaded:\", pdf);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>PDF Uploader</h1>\n      <input type=\"file\" accept=\".pdf\" onChange={onFileChange} />\n      <button onClick={onUpload}>Upload</button>\n      {chapterOnePage && <p>Chapter I starts on page: {chapterOnePage}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMU,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChC,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAIF,IAAI,EAAE;MACR,MAAMG,UAAU,GAAG,MAAMH,IAAI,CAACI,WAAW,CAAC,CAAC;MAC3C,MAAMC,MAAM,GAAG,MAAMhB,WAAW,CAACiB,IAAI,CAACH,UAAU,CAAC;MACjDR,MAAM,CAACQ,UAAU,CAAC;;MAElB;MACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,YAAY,CAAC,CAAC,EAAED,CAAC,EAAE,EAAE;QAC9C,MAAME,IAAI,GAAGJ,MAAM,CAACK,OAAO,CAACH,CAAC,CAAC;QAC9B,MAAMI,OAAO,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;QAC3C,IAAID,OAAO,CAACE,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAACC,QAAQ,CAAC,WAAW,CAAC,CAAC,EAAE;UAC9DpB,iBAAiB,CAACU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UAC1B;QACF;MACF;IACF;EACF,CAAC;EAED,MAAMW,QAAQ,GAAGA,CAAA,KAAM;IACrB;IACA;IACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE1B,GAAG,CAAC;EACnC,CAAC;EAED,oBACEH,OAAA;IAAK8B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB/B,OAAA;MAAA+B,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBnC,OAAA;MAAOoC,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,MAAM;MAACC,QAAQ,EAAE/B;IAAa;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3DnC,OAAA;MAAQuC,OAAO,EAAEZ,QAAS;MAAAI,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACzC9B,cAAc,iBAAIL,OAAA;MAAA+B,QAAA,GAAG,4BAA0B,EAAC1B,cAAc;IAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV;AAACjC,EAAA,CArCQD,GAAG;AAAAuC,EAAA,GAAHvC,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
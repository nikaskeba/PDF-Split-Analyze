{"ast":null,"code":"var _jsxFileName = \"/Users/nika/Documents/GitHub/pdf-upload-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { PDFDocument } from 'pdf-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [pdf, setPdf] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n  const onFileChange = async e => {\n    const file = e.target.files[0];\n    if (file) {\n      const fileBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(fileBuffer);\n      setPdf(fileBuffer);\n      setNumPages(pdfDoc.getPageCount());\n    }\n  };\n  const onUpload = () => {\n    // Implement your upload logic here.\n    // For now, we'll just display a console message.\n    console.log(\"PDF uploaded:\", pdf);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PDF Uploader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      onChange: onFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), numPages && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Number of pages: \", numPages]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+w+rlCPW+PvVWSCygSF80t1ZTM4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PDFDocument","jsxDEV","_jsxDEV","App","_s","pdf","setPdf","numPages","setNumPages","onFileChange","e","file","target","files","fileBuffer","arrayBuffer","pdfDoc","load","getPageCount","onUpload","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/nika/Documents/GitHub/pdf-upload-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { PDFDocument } from 'pdf-lib';\n\nfunction App() {\n  const [pdf, setPdf] = useState(null);\n  const [numPages, setNumPages] = useState(null);\n\n  const onFileChange = async (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const fileBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(fileBuffer);\n      setPdf(fileBuffer);\n      setNumPages(pdfDoc.getPageCount());\n    }\n  };\n\n  const onUpload = () => {\n    // Implement your upload logic here.\n    // For now, we'll just display a console message.\n    console.log(\"PDF uploaded:\", pdf);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>PDF Uploader</h1>\n      <input type=\"file\" accept=\".pdf\" onChange={onFileChange} />\n      <button onClick={onUpload}>Upload</button>\n      {numPages && <p>Number of pages: {numPages}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMU,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChC,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAIF,IAAI,EAAE;MACR,MAAMG,UAAU,GAAG,MAAMH,IAAI,CAACI,WAAW,CAAC,CAAC;MAC3C,MAAMC,MAAM,GAAG,MAAMhB,WAAW,CAACiB,IAAI,CAACH,UAAU,CAAC;MACjDR,MAAM,CAACQ,UAAU,CAAC;MAClBN,WAAW,CAACQ,MAAM,CAACE,YAAY,CAAC,CAAC,CAAC;IACpC;EACF,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB;IACA;IACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEhB,GAAG,CAAC;EACnC,CAAC;EAED,oBACEH,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBrB,OAAA;MAAAqB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBzB,OAAA;MAAO0B,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,MAAM;MAACC,QAAQ,EAAErB;IAAa;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3DzB,OAAA;MAAQ6B,OAAO,EAAEZ,QAAS;MAAAI,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACzCpB,QAAQ,iBAAIL,OAAA;MAAAqB,QAAA,GAAG,mBAAiB,EAAChB,QAAQ;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV;AAACvB,EAAA,CA5BQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
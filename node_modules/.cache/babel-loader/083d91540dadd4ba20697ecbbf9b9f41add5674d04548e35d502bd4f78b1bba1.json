{"ast":null,"code":"var _jsxFileName = \"/Users/nika/Documents/GitHub/pdf-upload-app/src/App.js\",\n  _s = $RefreshSig$();\n//app.js\nimport React, { useState } from 'react';\nimport * as pdfjs from 'pdfjs-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = process.env.PUBLIC_URL + '/pdf.worker.js';\nfunction App() {\n  _s();\n  const [pdf, setPdf] = useState(null);\n  const [chapterOnePage, setChapterOnePage] = useState(null);\n  const onFileChange = async e => {\n    const file = e.target.files[0];\n    console.log(\"Selected file:\", file); // Log the file details\n\n    if (file) {\n      const fileReader = new FileReader();\n      fileReader.onload = async event => {\n        const pdfData = new Uint8Array(event.target.result);\n        setPdf(pdfData);\n\n        // Directly store to local storage\n        try {\n          const pdfString = Array.from(pdfData).toString();\n          localStorage.setItem('uploadedPdf', pdfString);\n          console.log(\"PDF stored locally.\");\n        } catch (error) {\n          console.error(\"Failed to store PDF:\", error);\n        }\n      };\n      fileReader.onerror = error => {\n        console.error(\"File reading error:\", error); // Log any reading errors\n      };\n\n      fileReader.readAsArrayBuffer(file);\n    }\n  };\n  const retrieveUploadedPdf = () => {\n    const pdfString = localStorage.getItem('uploadedPdf');\n    if (pdfString) {\n      const pdfArray = pdfString.split(',').map(byte => parseInt(byte, 10));\n      const retrievedPdf = new Uint8Array(pdfArray);\n      console.log(\"Retrieved PDF:\", retrievedPdf);\n      // Do something with retrievedPdf\n    } else {\n      console.log(\"No PDF found in local storage.\");\n    }\n  };\n  const onUpload = () => {\n    if (!pdf) {\n      console.error(\"No PDF selected for upload.\");\n      return;\n    }\n    try {\n      // Convert the Uint8Array to a string for storage\n      const pdfString = Array.from(pdf).toString();\n\n      // Store in local storage\n      localStorage.setItem('uploadedPdf', pdfString);\n      console.log(\"PDF uploaded locally.\");\n    } catch (error) {\n      console.error(\"Failed to upload PDF:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PDF Uploader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf\",\n      onChange: onFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), chapterOnePage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Chapter I starts on page: \", chapterOnePage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xP4czhumVSLQwb37JpnqHE/1Nkk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","pdfjs","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","process","env","PUBLIC_URL","App","_s","pdf","setPdf","chapterOnePage","setChapterOnePage","onFileChange","e","file","target","files","console","log","fileReader","FileReader","onload","event","pdfData","Uint8Array","result","pdfString","Array","from","toString","localStorage","setItem","error","onerror","readAsArrayBuffer","retrieveUploadedPdf","getItem","pdfArray","split","map","byte","parseInt","retrievedPdf","onUpload","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/nika/Documents/GitHub/pdf-upload-app/src/App.js"],"sourcesContent":["//app.js\nimport React, { useState } from 'react';\nimport * as pdfjs from 'pdfjs-dist';\n\npdfjs.GlobalWorkerOptions.workerSrc = process.env.PUBLIC_URL + '/pdf.worker.js';\n\nfunction App() {\n  const [pdf, setPdf] = useState(null);\n  const [chapterOnePage, setChapterOnePage] = useState(null);\n\nconst onFileChange = async (e) => {\n  const file = e.target.files[0];\n  console.log(\"Selected file:\", file);  // Log the file details\n\n  if (file) {\n    const fileReader = new FileReader();\n\n fileReader.onload = async (event) => {\n    const pdfData = new Uint8Array(event.target.result);\n    setPdf(pdfData);\n\n    // Directly store to local storage\n    try {\n        const pdfString = Array.from(pdfData).toString();\n        localStorage.setItem('uploadedPdf', pdfString);\n        console.log(\"PDF stored locally.\");\n    } catch (error) {\n        console.error(\"Failed to store PDF:\", error);\n    }\n};\n\n    fileReader.onerror = (error) => {\n      console.error(\"File reading error:\", error);  // Log any reading errors\n    };\n\n    fileReader.readAsArrayBuffer(file);\n  }\n};\n\n\nconst retrieveUploadedPdf = () => {\n  const pdfString = localStorage.getItem('uploadedPdf');\n  if (pdfString) {\n    const pdfArray = pdfString.split(',').map(byte => parseInt(byte, 10));\n    const retrievedPdf = new Uint8Array(pdfArray);\n    console.log(\"Retrieved PDF:\", retrievedPdf);\n    // Do something with retrievedPdf\n  } else {\n    console.log(\"No PDF found in local storage.\");\n  }\n};\n\nconst onUpload = () => {\n  if (!pdf) {\n    console.error(\"No PDF selected for upload.\");\n    return;\n  }\n\n  try {\n    // Convert the Uint8Array to a string for storage\n    const pdfString = Array.from(pdf).toString();\n\n    // Store in local storage\n    localStorage.setItem('uploadedPdf', pdfString);\n\n    console.log(\"PDF uploaded locally.\");\n  } catch (error) {\n    console.error(\"Failed to upload PDF:\", error);\n  }\n};\n\n\n  return (\n    <div className=\"App\">\n      <h1>PDF Uploader</h1>\n      <input type=\"file\" accept=\".pdf\" onChange={onFileChange} />\n      <button onClick={onUpload}>Upload</button>\n      {chapterOnePage && <p>Chapter I starts on page: {chapterOnePage}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}